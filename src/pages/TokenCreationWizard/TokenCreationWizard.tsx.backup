import React, { useState } from "react";
import { useNavigate } from "react-router-dom";
import {
    WizardStepper,
    BasicInformation,
    TokenProperties,
    ReviewConfirm,
    Deploy,
    type TokenData,
} from "./components";

export const TokenCreationWizard: React.FC = () => {
    const navigate = useNavigate();
    const [currentStep, setCurrentStep] = useState(1);

    const [tokenData, setTokenData] = useState<TokenData>({
        name: "",
        ticker: "",
        initialSupply: "",
        decimals: "18",
        supplyType: "fixed",
        burnable: true,
        ownershipTransfer: true,
        pausable: false,
        freezable: false,
        wipeable: false,
        upgradable: false,
        nftCreate: false,
    });

    const steps = [
        { title: "Basic Info", description: "Name & Supply" },
        { title: "Properties", description: "Token Rules" },
        { title: "Review", description: "Confirm Details" },
        { title: "Deploy", description: "Create Token" },
    ];

    const handleInputChange = (
        field: keyof TokenData,
        value: string | boolean
    ) => {
        setTokenData((prev) => ({ ...prev, [field]: value }));
    };

    const handleNext = () => {
        if (currentStep < 4) {
            setCurrentStep((prev) => prev + 1);
        }
    };

    const handleBack = () => {
        if (currentStep > 1) {
            setCurrentStep((prev) => prev - 1);
        }
    };

    const handleDeploy = async () => {
        // TODO: Implement actual deployment logic
        console.log("Deploying token with data:", tokenData);
        // For now, redirect to dashboard
        navigate("/app/dashboard");
    };

    const renderCurrentStep = () => {
        switch (currentStep) {
            case 1:
                return (
                    <BasicInformation
                        tokenData={tokenData}
                        onInputChange={handleInputChange}
                    />
                );
            case 2:
                return (
                    <TokenProperties
                        tokenData={tokenData}
                        onInputChange={handleInputChange}
                    />
                );
            case 3:
                return <ReviewConfirm tokenData={tokenData} />;
            case 4:
                return <Deploy onDeploy={handleDeploy} />;
            default:
                return (
                    <BasicInformation
                        tokenData={tokenData}
                        onInputChange={handleInputChange}
                    />
                );
        }
    };

    const isNextDisabled = () => {
        switch (currentStep) {
            case 1:
                return (
                    !tokenData.name ||
                    !tokenData.ticker ||
                    !tokenData.initialSupply
                );
            case 2:
                return false; // Properties are optional
            case 3:
                return false; // Review step
            default:
                return false;
        }
    };

    return (
        <div className="min-h-screen bg-app-canvas">
            {/* Header */}
            <div className="bg-white border-b border-ash">
                <div className="max-w-4xl mx-auto px-6 py-4">
                    <div className="flex items-center gap-4">
                        <button
                            onClick={() => navigate("/app/dashboard")}
                            className="p-2 hover:bg-gray-100 rounded-lg transition-colors duration-200"
                        >
                            <svg
                                className="w-5 h-5 text-slate"
                                fill="none"
                                viewBox="0 0 24 24"
                                stroke="currentColor"
                            >
                                <path
                                    strokeLinecap="round"
                                    strokeLinejoin="round"
                                    strokeWidth={2}
                                    d="M15 19l-7-7 7-7"
                                />
                            </svg>
                        </button>
                        <div>
                            <h1 className="text-xl font-bold text-graphite">
                                Token Creation Wizard
                            </h1>
                            <p className="text-sm text-slate">
                                Create your token in just a few simple steps
                            </p>
                        </div>
                    </div>
                </div>
            </div>

            <div className="max-w-4xl mx-auto px-6 py-8">
                <WizardStepper
                    currentStep={currentStep}
                    totalSteps={4}
                    steps={steps}
                />

                {/* Main Content */}
                <div className="bg-white/90 backdrop-blur-sm rounded-2xl border border-white/50 shadow-level-2 p-8 mb-8">
                    {renderCurrentStep()}
                </div>

                {/* Navigation */}
                {currentStep < 4 && (
                    <div className="flex justify-between">
                        <button
                            onClick={handleBack}
                            disabled={currentStep === 1}
                            className="px-6 py-3 border border-gray-300 text-gray-700 rounded-xl font-medium
                                hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200"
                        >
                            Back
                        </button>

                        <button
                            onClick={handleNext}
                            disabled={isNextDisabled()}
                            className="px-8 py-3 bg-create-500 text-white rounded-xl font-medium
                                hover:bg-create-600 disabled:opacity-50 disabled:cursor-not-allowed 
                                shadow-interactive hover:shadow-interactive-hover transform hover:scale-105 
                                transition-all duration-200 flex items-center gap-2"
                        >
                            {currentStep === 3 ? "Deploy Token" : "Continue"}
                            <svg
                                className="w-4 h-4"
                                fill="none"
                                viewBox="0 0 24 24"
                                stroke="currentColor"
                            >
                                <path
                                    strokeLinecap="round"
                                    strokeLinejoin="round"
                                    strokeWidth={2}
                                    d="M9 5l7 7-7 7"
                                />
                            </svg>
                        </button>
                    </div>
                )}
            </div>
        </div>
    );
};
